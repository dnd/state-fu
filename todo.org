# +STARTUP:hidestars
# TODO / DEVELOPMENT NOTES

# Note: most of the value of this kind of list is in the act of
# writing it.

# i.e., don't expect it to be up to date.
==================================================

* features

** spec / code for introspection of transitionHalted exceptions during a transition
** configurable event method definitions for object / lathe
** ensure event methods are callable before calling state_fu!
*** use method_missing to call .state_fu! then try again / super?
** more / better logging
** test / improve integration w/ rails logger
** automatic transitions
*** automatic events must be simple (single target)
*** flag events as automatic w/ options[:auto] = true
*** automatically sorted & fired whenever ...
    .state_fu is called? .autofire! is called?

* decisions
** should binding keep a ref to the last transition?

* specs
** better spec coverage for binding
** rcov (waiting for 1.9)
** example machines in specs/example_machines/
** rewrite account example integration spec

* docs
** write cheat / intro / examples

====================================================

* Bugs
** Machines are not inherited. Is this a bug?
   To make them inheritable we'd be back to needing a Binding
   or some other substantial complexity.
   I don't think it's worth it.
** method definitions for event firing cannot be called on the stateful object before state_fu[!] has been called (which instantiates the methods).

* Decisions
** removed ability to have procs as origin / target states
*** not worth the complexity, too hard to debug in real use, performance
*** can easily add all states as potential candidates, to be screened via requirements

* Wishlist
** test storing meta-information in options for integration with eg Rails controllers, views
** Rails helpers for views etc? Tie-in to controller stuff?
** conditionals - guards & test transitions
*** needs / requires
** Persistence w/ Marshall.dump / reload ;; json / yaml ;;
   Marshal works a treat as long as you got no procs
*** useful though?
*** other formats?
**** YAML
**** JSON
**** nested hash as basic interchange format?
*** avoid procs if possible, or provide alternatives, to keep these options open
*** serialize / deserialize allows easy deep-object copies

** Documentation
*** high-level overviews
**** of the API / syntax
**** of the behind-the-scenes action and how classes relate

* requirements, etc should be orderable
** auto-order-by :position option
** array mixins to help move stuff around

** Machines should
*** be deep-copyable
**** store blocks passed to them in an array so that they can be replayed?
**** use a recorder pattern?
**** -> common interchange format? ie, hash / marshal.dump / yaml ?
*** cast to string / json / ... without looking like ass
*** able to generate dot / graphviz

** Class/object API
*** should be interchangeable

** Contexts
*** should be extensible by the user to create a custom DSL
**** how to work this into the DSL? Scope?

* Specs pending

* Code smells
** specs

* Other
** testing w/ heckle, rcov
** Cucumber
** benchmark / tune for performance
*** Cuc. for user-facing API; Rspec for internals?
