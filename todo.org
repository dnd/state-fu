# +STARTUP:hidestars
# TODO / DEVELOPMENT NOTES
# Note: most of the value of this kind of list is in the act of
# writing it.

# i.e., don't expect it to be up to date.
==================================================

#
# DOCUMENTATION: Reference state machines -- poker game; message queue; protocol parser / syntax
#



* Documentation, documentation, documentation: cucumber.
* specs
** review RDOC / code comments
** spec cleanup / housekeeping ( -> BDD folder )
** more examples in features
** test / spec helpers for testing machines
** TODO helpers for end-user / developers' spec / test / cuke code
** next_state behaviour in particular needs better documentation
** document all the requirement stuff well with examples
** test / example: storing meta-information in options for integration with eg Rails controllers, views
** detailed documentation for
*** execution context, method lookup
*** lathe DSL
*** exending lathe, binding

* gem release / script for RubyForge; rubyforge project page

* general improvements
** spec / code for introspection of transitionHalted exceptions during a transition
** finesse / test logging
** test log prefix in shared logs
** autosave option for activerecord
** auto transitions & update! method
** better to_s / inspect for all

* ideas
** Deep copy / duplication / serialization
** next_state & next_state! method should be able to take a hash or proc a filter
*** hash filter based on .options
*** proc filter replaces block; arbitrary filtering
*** this allows you to eg define :auto => true on some states and filter just those
** singleton machines & deep copy / clone
*** machines for an instance of a class
*** method customize_machine! which clones & replaces class binding with instance binding
** <field_name>= method: trigger a transition if a next_state is given
** Rails helpers for views etc? Tie-in to controller stuff?
** inheritance? -> search up inheritance chain for machine ...
** should binding keep a ref to the last transition?
** keep a history of transitions
** common (yaml) machine description (serialization) format
** benchmark / tune

* implement simple deep cloning

    class Object
      def dclone
        case self
          when Fixnum,Bignum,Float,NilClass,FalseClass,
               TrueClass,Continuation
            klone = self
          when Hash
            klone = self.clone
            self.each{|k,v| klone[k] = v.dclone}
          when Array
            klone = self.clone
            klone.clear
            self.each{|v| klone << v.dclone}
          else
            klone = self.clone
        end
        klone.instance_variables.each {|v|
          klone.instance_variable_set(v,
            klone.instance_variable_get(v).dclone)
        }
        klone
      end
    end
