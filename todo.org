# +STARTUP:hidestars
# TODO / DEVELOPMENT NOTES

# Note: most of the value of this kind of list is in the act of
# writing it.

# i.e., don't expect it to be up to date.
==================================================
* TODOs
** event fire method on object / binding
** koan units
** other units
** integration specs
** settle on rr or rspec (!) mocking

====================================================

* Bugs
** Koans are not inherited. Is this a bug?
   To make them inheritable we'd be back to needing a Binding
   or some other substantial complexity.
   I don't think it's worth it.

* Decisions
** removed ability to have procs as origin / target states
*** not worth the complexity / fugly code
*** can use guard conditions on states to test if they're available
*** performance
*** can use conditions on events to check if something's valid at transition time

* Wishlist
** auto transitions and default arguments
*** find permissable events and try firing them; repeat until deadlock
** DONE storing meta-information in options for integration with eg Rails controllers, views
** Rails helpers for views etc? Tie-in to controller stuff?
** event hooks
** conditionals / halting
*** halt!
*** halt_if | halt_unless
*** needs / requires

** TESTED Persistence w/ Marshall.dump / reload
   works a treat as long as you got no procs
*** useful though?
*** other formats?
**** YAML
**** JSON
**** nested hash as basic interchange format?
*** avoid procs if possible, or provide alternatives, to keep these options open
*** serialize / deserialize allows easy deep-object copies

** Documentation
*** high-level overviews
**** of the API / syntax
**** of the behind-the-scenes action and how classes relate

* requirements, etc should be orderable
** auto-order-by :position option
** array mixins to help move stuff around

** Koans should
*** be deep-copyable
**** store blocks passed to them in an array so that they can be replayed?
**** use a recorder pattern?
**** -> common interchange format? ie, hash / marshal.dump / yaml ?
*** cast to string / json / ... without looking like ass
*** able to generate dot / graphviz

*

** Class/object API
*** should be interchangeable

** Contexts
*** should be extensible by the user to create a custom DSL
**** how to work this into the DSL? Scope?

* Specs pending

* Code smells

* Other
** testing w/ heckle, rcov
** decide where to use Cucumber & where Rspec
** benchmark / tune for performance
*** Cuc. for user-facing API; Rspec for internals?
