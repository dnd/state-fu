h1. State-Fu

h2. What is it?

State-Fu is:

 * an unique toolkit for state-oriented programming

 * a rich DSL for describing workflows, rules engines and behaviour

 * probably deceptively familiar in outward appearance

It lets you describe:

 * series of discrete states

 * events which can change the current state

 * rules about when these events can occur

 * behaviours which occur when they do

Other libraries exist for ruby which do some or all of these
things. "What's different about State-Fu?", you may ask.

Those libraries you've played with are toys. They're made of
plastic. State-Fu is forged from a reassuringly dense but
unidentifiable metal which comes only from the rarest of meteorites,
and it ticks when you hold it up to your ear.

Some of the features which set State-Fu apart are:

 * use an ActiveRecord field for state persistence, or just an
   attribute

 * use both, on the same class, for different workflows

 * use any number of workflows on the same object / model, or re-use
   them across multiple classes

 * a rich set of event hooks to drive application behaviour

 * events can transition from / to any number of states

 * guard conditions determine at runtime whether a particular state
   transition can occur

 * transitions can be halted midway, and you can actually determine
   why, and where from

 * use helpers to extend State-Fu to suit your problem domain

 * define behaviour as methods on your objects, or keep it all in the
   state machine itself

 * store arbitrary meta-data on any component of a machine (a simple
   but insanely useful tool for integration)

 * design for transparency, introspection and ease of debugging means
   a dynamic, powerful system you can actually use

 * fast, lightweight and useful enough to use in any ruby
   project - works with Rails but does not require it.

 * works with ruby 1.8 and 1.9
